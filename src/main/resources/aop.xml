<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


    <!-- 开启aop注解扫描器 -->
<!--    <context:component-scan base-package="org.aron.springTest.*" />-->
<!--    <aop:aspectj-autoproxy/>-->

    <!-- 配置通知对象 -->
    <bean id="aop" class="org.aron.springTest.aop.TestAop"/>

    <bean id="user1" class="org.aron.springTest.bean.User"/>

    <!-- 配置aop
        proxy-target-class=true: 指定cglib代理
        关于 execution 语法:
            1.execution(public * *()) 所有的public的方法
            2.execution(* cn.study.aop.*(..)) 所有的aop包下的所有类的方法(不包含子包)
            3.execution(* cn.study.aop..*(..)) 所有的aop包及其子包下的所有类的方法
            4.execution(* cn.study.aop.IOrderService.*(..)) IOrderService接口中定义的所有方法
            5.execution(* cn.study.aop.IOrderService+.*(..)) 匹配实现特定接口所有类的方法
            6.execution(* save*(..)) 区配所有的以save开头的方法
    -->
    <aop:config proxy-target-class="true">
        <aop:pointcut id="pointcut" expression="execution(* org.aron.springTest.bean.User.*(..))" />
        <aop:aspect ref="aop">
            <!-- 定义一个切点 expression：指定切入点表达式-->
            <!-- 前置通知 -->
            <aop:before method="before" pointcut-ref="pointcut"/>
            <!-- 环绕通知 -->
            <aop:around method="around" pointcut-ref="pointcut"/>
            <!-- 后置通知(如果出现异常不会调用) returning: 返回值 -->
            <aop:after-returning method="afterReturning" pointcut-ref="pointcut" returning="val" />
            <!-- 后置通知(出现异常时调用) throwing: 异常参数 -->
            <aop:after-throwing method="afterException" pointcut-ref="pointcut" throwing="e"/>
            <!-- 后置通知 -->
            <aop:after method="after" pointcut-ref="pointcut" />
        </aop:aspect>
    </aop:config>

</beans>